#!/bin/bash

## Description  : enter in specify container
## Autor        : lvguanglin
## Modified Time: 2015/06/29


# Normal Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

NC='\e[m'               # Color Reset

#default TERM is dumb,but it will report "TERM environment variable not set"
#evenif echo $TEMR return dumb,have to export TERM=dumb again.
#for garden container we specify --env TERM=xterm
#for docker container would be better add ENV TERM xterm into the Dockerfile
#https://github.com/dockerfile/mariadb/issues/3
C_TERM=xterm

#shell
shell=/bin/sh
if [ -f /bin/bash ]; then shell=/bin/bash ; fi

#specify container environment,only support garden container
C_ENVS=()
C_ENV_IDX=0

function command_exists() {
  command -v "$@" > /dev/null 2>&1
}

function usage() {
	(echo ""
	echo "Usage: $0 OPTIONS"
	echo ""
	echo -e "  -t,--type <container type>     the connecting container type,${BRed}only support garden and docker currently.${NC}"
	echo "  -i,--id   <container id>       the connecting container id"
	echo -e "  -u,--user [container user]     User to change to in the connecting container."
	#echo -e "  -d,--dir  [path]               Working directory for the running process,${BRed}only support garden container$ currently.${NC}"
	#echo  "  -e,--env  [KEY=VALUE]          Environment variables to set for the login shell,You can specify multiple --env arguments."
	#echo -e "                                 ${BRed}only support garden container currently.${NC}"
	echo ""
	echo "  -h,--help   display this help and exit"
	echo "")>&2
	[ "$@" ] && {
		echo -e "${BRed}ERROR : $@ ${NC}" >&2
	}
	exit 1
}

function welcome() {
	echo -ne "${BYellow}"
	echo "Login in $C_TYPE container $C_ID"
	echo "USER : ${C_USER}"
	if [ -z $C_DIR ]; then
		if [ "$C_USER" == "root" ]; then echo "DIR  : /root" ; else echo "DIR  : /home/$C_USER" ; fi
	else
		echo "DIR  : $C_DIR"
	fi
	echo -ne "${NC}"
}

function bye() {
	echo -e "${BRed} bye bye ...${NC}"
}

function connect_garden_container() {
	local garden_wsh="/var/vcap/packages/garden-linux/skeleton/bin/wsh"
	local garden_container_socket="/var/vcap/data/garden-linux/depot/${C_ID}/run/wshd.sock"
	if [ ! -f $garden_wsh ]; then usage "Garden wsh is not exit '$garden_wsh'" ; fi
	if [ ! -S $garden_container_socket ]; then usage "$C_TYPE Container $C_ID is not running or exist!" ; fi
	
	EXEC="$garden_wsh --socket $garden_container_socket"
	if [ -n "$C_USER" ]; then EXEC="$EXEC --user $C_USER" ; fi
	if [ -n "$C_DIR" ]; then EXEC="$EXEC --dir $C_DIR" ; fi
	
	local has_term_env=""
	for it in ${C_ENVS[@]}; do
		#if [ $(echo "${it%%=*}"|tr [a-z] [A-Z]) == "TERM" ] ; then has_term_env="true" ; fi
		if [ "$it" == "TERM" ] ; then has_term_env="true" ; fi
		EXEC="$EXEC --env $it"
	done
	if [ -z "$has_term_env" ]; then EXEC="$EXEC --env TERM=$C_TERM" ; fi
}

function connect_docker_container() {
	EXEC="$DOCKER_CMD exec -it $C_ID /bin/bash -c 'export TERM=$C_TERM;/bin/su - $C_USER'"
	#if [ -n "$C_USER" ]; then echo -e "${BRed}Warning!!! Docker container doesn't support specify user ${NC}" ; C_USER="" ; fi
	if [ -n "$C_DIR" ]; then echo -e "${BRed}Warning!!! Docker container doesn't support specify directory ${NC}" ; fi
	if [ ${#C_ENVS[@]} -gt 0 ] ; then 
		echo -e "${BRed}Warning!!! Docker container doesn't support specify environment ${NC}"
		for it in ${C_ENVS[@]}; do echo -e "${BRed}           Ignore specify environment '$it' ${NC}" ; done
	fi
}

function garden_container() {
	if [ -z "$C_ID" ]; then usage "You must specify containet id that you want to connect!" ; fi
	C_USER=${C_USER:-root}  #default login in as root
	
	if [ ! -f "/var/vcap/data/garden-linux/depot/${C_ID}/run/wshd.pid" ]; then usage "$C_TYPE Container $C_ID is not running or exist!" ; fi
	C_PID=$(cat "/var/vcap/data/garden-linux/depot/${C_ID}/run/wshd.pid" 2>&1)
	if [ $? != 0 ]; then usage "Fail get $C_TYPE container $C_ID pid, $C_PID" ; fi
	
	if command_exists nsattach; then
		EXEC="nsattach --target $C_PID --mount --uts --ipc --net --pid --pty -- /bin/bash -c '/bin/su - $C_USER'"
	elif command_exists nsenter; then
		EXEC="nsenter --target $C_PID --mount --uts --ipc --net --pid -- /bin/bash -c '/bin/su - $C_USER'"
	else
		connect_garden_container
	fi
}

function docker_container() {
	if [ -z "$C_ID" ]; then usage "You must specify containet id that you want to connect!" ; fi
	C_USER=${C_USER:-root}  #default login in as root
	
	if command_exists docker; then
		DOCKER_CMD=docker
	elif command_exists lxc-docker; then
		DOCKER_CMD=lxc-docker
	else
		usage "docker command is not exist!"
	fi
	
	C_PID=$($C_SUDO $DOCKER_CMD inspect --format '{{.State.Pid}}' $C_ID 2>&1)
	if [ $? != 0 ]; then usage "Fail get $C_TYPE container $C_ID pid, $C_PID" ; fi
	if [ "$C_PID" == 0 ]; then usage "$C_TYPE container $C_ID is not running" ; fi
	
	if command_exists nsattach; then
		EXEC="nsattach --target $C_PID --mount --uts --ipc --net --pid --pty -- /bin/bash -c '/bin/su - $C_USER'"
	elif command_exists nsenter; then
		EXEC="nsenter --target $C_PID --mount --uts --ipc --net --pid -- /bin/bash -c '/bin/su - $C_USER'"
	else
		connect_docker_container
	fi
}

function enter_container() {
	if [ -n "$EXEC" ]; then
		welcome
		$shell -c "$C_SUDO $EXEC"
		bye
	fi
}

function check_usage() {
	USER="$(id -un 2>/dev/null || true)"
	if [ "$USER" != 'root' ]; then
		#usage "you must be run this as root,maybe sudo is needed."
		if command_exists sudo; then
			C_SUDO="sudo "
		else
			echo -e "${BRed}Warning!!! cannot find sudo; Invoking as the user $USER. ${NC}" >&2
		fi
	fi

	case "$1" in
		-h|--help)
			usage ;;
		*)
			if [ $# -eq 0 ]; then usage ; fi
			;;
	esac
}

check_usage $@

echo -ne "${BRed}"
#GETOPT_FROMAT=`getopt -o t:i:u:d:e: --long type:,id:,user:,dir:,env: -n 'ssh-container'  -- "$@"`
GETOPT_FROMAT=`getopt -o t:i:u: --long type:,id:,user: -n 'ssh-container'  -- "$@"`
if [ $? != 0 ] ; then GETOPT_ERROR="true" ; fi
echo -ne "${NC}"
if [ -n "$GETOPT_ERROR" ] ; then usage ; fi

eval set -- "$GETOPT_FROMAT"
while true ; do
	case "$1" in
		-t|--type) 
			if [ -n "$C_TYPE" ]; then usage "duplicate -t or --type,'$1 $2'" ; fi
			C_TYPE=$2 ; shift 2 ;;
		-i|--id)
			if [ -n "$C_ID" ]; then usage "duplicate -i or --id '$1 $2'" ; fi 
			C_ID=$2 ; shift 2 ;;
		-u|--user)
			if [ -n "$C_USER" ]; then usage "duplicate -u or --user '$1 $2'" ; fi
			C_USER=$2 ; shift 2 ;;
		-d|--dir)
			if [ -n "$C_DIR" ]; then usage "duplicate -d or --dir '$1 $2'" ; fi
			C_DIR=$2 ; shift 2 ;;
		-e|--env)
			case "$2" in
				*=*)
#					KEY="${2%%=*}" ; VALUE="${2#*=}" ;
					C_ENVS[$[C_ENV_IDX++]]="$2"
					shift 2 ;;
				*) echo -e "${BRed}Warning!!! Invalid $1 --> '$2' ${NC}" ; shift 2 ;;
			esac ;;
		--) shift ; break ;;
		*) usage "getopt Internal error!" ;;
	esac
done

for arg do
	echo -e "${BRed}Warning!!! Invalid argument --> '$arg' ${NC}"
done


case "$C_TYPE" in
	garden)
		garden_container ;;
	docker)
		docker_container ;;
	*) usage "Dont support container type '$C_TYPE'" ;;
esac

enter_container

exit 0
