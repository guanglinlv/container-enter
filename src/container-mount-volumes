#!/bin/bash

## Description  : dynamic mount volumes like docker run -v
## Autor        : lvguanglin
## Modified Time: 2015/07/16

# Normal Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

NC='\e[m'               # Color Reset

#local volums array
declare -a C_LOCAL_VOLS=()
C_LOCAL_VOLS_IDX=0

#remote volums array
declare -a C_REMOT_VOLS=()
C_REMOT_VOLS_IDX=0

# C_VALID_LOCAL_VOLS is M x 6 array
#    0     1   2    3     4        5
# 0 host cont DEV DEVEC SUBROOT SUBPATH 
# 1 host cont DEV DEVEC SUBROOT SUBPATH 
# C_VALID_LOCAL_VOLS is M x 6 array
declare -a C_VALID_LOCAL_VOLS=()
C_VALID_LOCAL_VOLS_IDX=0
C_VALID_LOCAL_VOLS_SIZE=6

#declare -a C_VALID_REMOT_VOLS=()
#C_VALID_REMOT_VOLS_IDX=0

declare -a C_COMMANDS=()
C_COMAND_IDX=0

function command_exists() {
  command -v "$@" > /dev/null 2>&1
}

function usage() {
	(echo ""
	echo "Usage: `basename $0` OPTIONS"
	echo ""
	echo -e "  -t,--type <container type>                    the connecting container type,${BRed}only support garden and docker currently.${NC}"
	echo "  -i,--id   <container id>                      the connecting container id"
	echo "  -v,--volumes [volumes,host:container]         volumes which will be dynamic mount to specify container,You can specify multiple -v arguments."
	#echo "  --remote-volumes [net-volumes,net:container]  remote volumes which will be dynamic mount to specify container."
	echo "  -c,--command [\"execute command\"]              you can give some command that will run in specified container,You can specify multiple -c arguments."
	echo ""
	echo "  -h,--help   display this help and exit"
	echo "")>&2
	[ "$@" ] && {
		echo -e "${BRed}ERROR : $@ ${NC}" >&2
	}
	exit 1
}

function default_garden_container() {
	local garden_wsh="/var/vcap/packages/garden-linux/skeleton/bin/wsh"
	local garden_container_socket="/var/vcap/data/garden-linux/depot/${C_ID}/run/wshd.sock"
	if [ ! -f $garden_wsh ]; then usage "Garden wsh is not exit '$garden_wsh'" ; fi
	if [ ! -S $garden_container_socket ]; then usage "$C_TYPE Container $C_ID is not running or exist!" ; fi
	
	EXEC="$garden_wsh --socket $garden_container_socket /bin/bash -c "
}

function garden_container() {
	if [ -z "$C_ID" ]; then usage "You must specify container id!" ; fi
	
	if [ ! -f "/var/vcap/data/garden-linux/depot/${C_ID}/run/wshd.pid" ]; then usage "$C_TYPE Container $C_ID is not running or exist!" ; fi
	C_PID=$(cat "/var/vcap/data/garden-linux/depot/${C_ID}/run/wshd.pid" 2>&1)
	if [ $? != 0 ]; then usage "Fail get $C_TYPE container $C_ID pid, $C_PID" ; fi
	
	if command_exists nsattach; then
		EXEC="nsattach --target $C_PID --mount --uts --ipc --net --pid --pty -- /bin/bash -c "
	elif command_exists nsenter; then
		EXEC="nsenter --target $C_PID --mount --uts --ipc --net --pid -- /bin/bash -c "
	else
		default_garden_container
	fi
}

function docker_container() {
	if [ -z "$C_ID" ]; then usage "You must specify container id!" ; fi
	
	if command_exists docker; then
		DOCKER_CMD=docker
	elif command_exists lxc-docker; then
		DOCKER_CMD=lxc-docker
	else
		usage "docker command is not exist!"
	fi
	
	C_PID=$($DOCKER_CMD inspect --format '{{.State.Pid}}' $C_ID 2>&1)
	if [ $? != 0 ]; then usage "Fail get $C_TYPE container $C_ID pid, $C_PID" ; fi
	if [ "$C_PID" == 0 ]; then usage "$C_TYPE container $C_ID is not running" ; fi
	
	if command_exists nsattach; then
		EXEC="nsattach --target $C_PID --mount --uts --ipc --net --pid --pty -- /bin/bash -c "
	elif command_exists nsenter; then
		EXEC="nsenter --target $C_PID --mount --uts --ipc --net --pid -- /bin/bash -c "
	else
		EXEC="$DOCKER_CMD exec -it $C_ID /bin/bash -c "
	fi
}

function check_local_volumes_item() {
	if [ -z "$1" ]; then return ; fi
	local volume="${1}"
	#eg, aaa:bbb:ccc:ddd , host is aaa:bbb:ccc ,cont is ddd
	local host_path=${volume%:*}
	local cont_path=${volume##*:}
	#if [ ${#host_path} -eq ${#volume} ]; then usage "Wrong volumes '${volume}'! Cant parse it!! format is <HOST-PATH>:<CONT-PATH>" ; fi
	if [ -a "${host_path}" -a ! -d "${host_path}" ]; then usage "${host_path} is exist and not a directory!" ; fi
	if [ ! -d "${host_path}" ]; then 
		echo -e "${BRed}Warning!!! ${host_path} is not exist,just do mkdir  ${NC}"
		mkdir -p "${host_path}"
	fi
	
	#follow symbol link
	local REALHOSTPATH=$(readlink --canonicalize ${host_path} 2>&1)
	if [ $? -ne 0 ]; then usage "readlink --canonicalize ${host_path} failed,Error: ${REALHOSTPATH}" ; fi
	
	local FILESYS=$(\df -P $REALHOSTPATH | tail -n 1 | awk '{print $6}')
	while read DEV MOUNT JUNK;do
			[ $MOUNT = $FILESYS ] && [ $DEV != "rootfs" ] && break
	done </proc/mounts
	if [ $MOUNT != $FILESYS ]; then usage "Cant find DEV for '${REALHOSTPATH}' from /proc/mounts!" ; fi
	while read A B C SUBROOT MOUNT JUNK;do
		[ $MOUNT = $FILESYS ] && break
	done < /proc/self/mountinfo
	if [ $MOUNT != $FILESYS ]; then usage "Cant find SUBROOT for '${host_path}' from /proc/self/mountinfo!" ; fi
	
	local C_DEV=$(readlink --canonicalize ${DEV} 2>&1)
	if [ $? -ne 0 ]; then usage "readlink --canonicalize ${DEV} failed,Error: ${C_DEV}" ; fi
	
	local C_SUBROOT="${SUBROOT}"
	
	local C_SUBPATH=$(echo "${REALHOSTPATH}" | sed s,^${FILESYS},, 2>&1)
	if [ $? -ne 0 ]; then usage "echo ${REALHOSTPATH} | sed s,^${FILESYS},, failed,Error: ${C_SUBPATH}" ; fi
	
	local HEX_DEVDEC=$(stat --format "0x%t 0x%T" "${C_DEV}" 2>&1)
	if [ $? -ne 0 ]; then usage "stat --format \"0x%t 0x%T\" ${C_DEV} failed,Error: $HEX_DEVDEC" ; fi
	
	local C_DEVDEC=$(printf "%d %d" $HEX_DEVDEC 2>&1)
	if [ $? -ne 0 ]; then usage "printf \"%d %d\" $HEX_DEVDEC failed,Error: ${C_DEVDEC}" ; fi
	
	# m x 6 array
	#    0     1   2    3     4        5
	# 0 host cont DEV DEVEC SUBROOT SUBPATH 
	# 1 host cont DEV DEVEC SUBROOT SUBPATH 
	# m x 6 array
	local a_size=${C_VALID_LOCAL_VOLS_SIZE:-6}
	local idx=$[C_VALID_LOCAL_VOLS_IDX++]
	C_VALID_LOCAL_VOLS[$[idx * $a_size + 0]]="${host_path}"
	C_VALID_LOCAL_VOLS[$[idx * $a_size + 1]]="${cont_path}"
	C_VALID_LOCAL_VOLS[$[idx * $a_size + 2]]="${C_DEV}"
	C_VALID_LOCAL_VOLS[$[idx * $a_size + 3]]="${C_DEVDEC}"
	C_VALID_LOCAL_VOLS[$[idx * $a_size + 4]]="${C_SUBROOT}"
	C_VALID_LOCAL_VOLS[$[idx * $a_size + 5]]="${C_SUBPATH}"
}

function check_local_volumes() {
	if [ ${#C_LOCAL_VOLS[@]} -eq 0 ]; then usage "No specify volumes!"; fi
	#check local volumes
	for local_vol in "${C_LOCAL_VOLS[@]}"; do
		check_local_volumes_item "${local_vol}"
	done
}

function mount_local_volumes_item() {
	local idx=$1
	local a_size=${C_VALID_LOCAL_VOLS_SIZE:-6}
	# m x 6 array
	#    0     1   2    3     4        5
	# 0 host cont DEV DEVEC SUBROOT SUBPATH 
	# 1 host cont DEV DEVEC SUBROOT SUBPATH 
	# m x 6 array
	local C_HOSTPATH="${C_VALID_LOCAL_VOLS[$[idx * $a_size + 0]]}"
	local C_CONTPATH="${C_VALID_LOCAL_VOLS[$[idx * $a_size + 1]]}"
	local C_DEV="${C_VALID_LOCAL_VOLS[$[idx * $a_size + 2]]}"
	local C_DEVDEC="${C_VALID_LOCAL_VOLS[$[idx * $a_size + 3]]}"
	local C_SUBROOT="${C_VALID_LOCAL_VOLS[$[idx * $a_size + 4]]}"
	local C_SUBPATH="${C_VALID_LOCAL_VOLS[$[idx * $a_size + 5]]}"
	
	echo "C_HOSTPATH : '$C_HOSTPATH'"
	echo "C_CONTPATH : '$C_CONTPATH'"
	echo "C_DEV : '$C_DEV'"
	echo "C_DEVDEC : '$C_DEVDEC'"
	echo "C_SUBROOT : '$C_SUBROOT'"
	echo "C_SUBPATH : '$C_SUBPATH'"
	
	local ret=$($EXEC "if /bin/mountpoint -q $C_CONTPATH; then echo YES; fi")
	ret=$(head -c 3 <<< $ret)
	if [ "$ret" == "YES" ]; then echo -e "${BRed}In $C_TYPE Container $C_ID, $C_CONTPATH is also mounting!${NC}" ; return ; fi
	
	$EXEC "[ -b $C_DEV ] ||/bin/mknod --mode 0600 $C_DEV b $C_DEVDEC"
	
	local TMPMNT=/tmp-$(head -n 100 /dev/urandom|tr -dc 'a-z0-9A-Z'|head -c 10)
	
	$EXEC "/bin/mkdir $TMPMNT"
	$EXEC "/bin/mount $C_DEV $TMPMNT"
	$EXEC "/bin/mkdir -p $C_CONTPATH"
	$EXEC "/bin/mount -o bind $TMPMNT/$C_SUBROOT/$C_SUBPATH $C_CONTPATH"
	$EXEC "/bin/umount $TMPMNT"
	$EXEC "/bin/rmdir $TMPMNT"
	
	ret=$($EXEC "if /bin/mountpoint -q $C_CONTPATH; then echo YES; fi")
	ret=$(head -c 3 <<< $ret)
	if [ "$ret" == "YES" ];then
		echo -e "${BBlue}In $C_TYPE Container $C_ID,dymainc mount physics $C_HOSTPATH on $C_CONTPATH successfully!${NC}"
	else
		echo -e "${BRed}In $C_TYPE Container $C_ID,dymaninc mount physics $C_HOSTPATH on $C_CONTPATH failed!${NC}"
	fi
}

function mount_local_volumes() {
	if [ $C_VALID_LOCAL_VOLS_IDX -gt 0 ]; then
		for item_idx in $(\seq 0 $[C_VALID_LOCAL_VOLS_IDX - 1]); do
			mount_local_volumes_item $item_idx
		done
	else
		usage "No valid local volumes specified!"
	fi
}

function run_commands() {
	for command in "${C_COMMANDS[@]}"; do
		echo -e "${BBlue}In $C_TYPE Container $C_ID,Run '${command}'${NC}"
		$EXEC "${command}"
	done
}

function get_container_exec() {
	#get container exec command
	case "$C_TYPE" in
		garden)
			garden_container ;;
		docker)
			docker_container ;;
		*) usage "Dont support container type '$C_TYPE'" ;;
	esac
}

function get_args() {
	echo -ne "${BRed}"
	#GETOPT_FROMAT=`getopt -o t:i:v: --long type:,id:,volumes:,remote-volumes: -n 'container-mount-volumes'  -- "$@"`
	GETOPT_FROMAT=`getopt -o t:i:v:c: --long type:,id:,volumes:,command: -n 'container-mount-volumes'  -- "$@"`
	if [ $? != 0 ] ; then GETOPT_ERROR="true" ; fi
	echo -ne "${NC}"
	if [ -n "$GETOPT_ERROR" ] ; then usage ; fi

	eval set -- "$GETOPT_FROMAT"
	while true ; do
		case "$1" in
			-t|--type) 
				if [ -n "$C_TYPE" ]; then usage "duplicate -t or --type,'$1 $2'" ; fi
				C_TYPE=$2 ; shift 2 ;;
			-i|--id)
				if [ -n "$C_ID" ]; then usage "duplicate -i or --id '$1 $2'" ; fi 
				C_ID=$2 ; shift 2 ;;
			-v|--volumes)
				#if [ -n "$C_VOLS" ]; then usage "duplicate -v or --volumes '$1 $2'" ; fi
				C_LOCAL_VOLS[$[C_LOCAL_VOLS_IDX++]]="$2" ; shift 2 ;;
			#remote-volumes)
			#	#if [ -n "$C_VOLS" ]; then usage "duplicate --remote-volumes '$1 $2'" ; fi
			#	C_REMOT_VOLS[$[C_REMOT_VOLS_IDX++]]="$2" ; shift 2 ;;
			-c|--command)
				C_COMMANDS[$[C_COMAND_IDX++]]="$2" ; shift 2 ;;
			--) shift ; break ;;
			*) usage "getopt Internal error!" ;;
		esac
	done

	for arg do
		echo -e "${BRed}Warning!!! Invalid argument --> '$arg' ${NC}"
	done
}

function check_usage() {
	local USER="$(id -un 2>/dev/null || true)"
	if [ "$USER" != 'root' ]; then
		usage "you must be run this as root,maybe sudo is needed."
	fi
	
	case "$1" in
		-h|--help)
			usage ;;
		*)
			if [ $# -eq 0 ]; then usage ; fi
			;;
	esac
}

function main() {
	# check usage
	check_usage "$@"
	
	# get input args
	get_args "$@"
	
	# get and check input local volumes
	check_local_volumes
	
	# get specify container exec , nsattach>nsenter>
	get_container_exec
	
	# execute mount local volumes for running container
	mount_local_volumes
	
	# run commands in container
	run_commands
}

main "$@"

